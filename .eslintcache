[{"/home/abdussamed/Krex/src/index.js":"1","/home/abdussamed/Krex/src/Login.js":"2","/home/abdussamed/Krex/src/Main.js":"3","/home/abdussamed/Krex/src/products/ProductTab.js":"4","/home/abdussamed/Krex/src/products/AddProduct.js":"5","/home/abdussamed/Krex/src/products/UpdateProduct.js":"6"},{"size":1362,"mtime":1613316035853,"results":"7","hashOfConfig":"8"},{"size":2385,"mtime":1613208232912,"results":"9","hashOfConfig":"8"},{"size":3495,"mtime":1613208270516,"results":"10","hashOfConfig":"8"},{"size":8194,"mtime":1613324922896,"results":"11","hashOfConfig":"8"},{"size":5625,"mtime":1613315382648,"results":"12","hashOfConfig":"8"},{"size":6140,"mtime":1613321137698,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"qjjc58",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/home/abdussamed/Krex/src/index.js",[],["29","30"],"/home/abdussamed/Krex/src/Login.js",[],"/home/abdussamed/Krex/src/Main.js",[],"/home/abdussamed/Krex/src/products/ProductTab.js",["31","32","33","34","35","36"],"import { useState } from \"react\";\nimport { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, InputAdornment, Menu,MenuItem, TextField } from \"@material-ui/core\";\nimport { ApiContext, DataGrid } from \"@material-ui/data-grid\";\nimport { Add, Beenhere, Description, MoreVert, PinDropSharp, Remove, Search } from \"@material-ui/icons\";\nlet {ipcRenderer} = window.require(\"electron\");\n\nexport default function ProductTab()\n{\n    let verticalCenter =  {marginTop:\"auto\",marginBottom:\"auto\"};\n    let [rows,setRows] = useState([]);\n    let [deleteRows,setDeleteRow] = useState([]);\n\n    async function updateData()\n    {\n        let rows = await ipcRenderer.invoke(\"db\",{\n            action:\"list\",\n            class:\"product\"\n        });\n        setRows(rows);\n    };\n    updateData();\n    async function doSearch(word)\n    {\n        if(word.length == 0){\n            return updateData()\n        };\n        let _rows = await ipcRenderer.invoke(\"db\",{\n            action:\"search\",\n            class:\"product\",\n            limit:1000,\n            data:{\n                isim:word,\n                marka:word,\n                model:word,\n                satisfiyati:word,\n                alisfiyati:word,\n                descript:word\n            }\n        });\n        console.log(_rows);\n        setRows(_rows);\n    };\n    async function handleProductAdd()\n    {\n        await ipcRenderer.invoke(\"modal\",\"addproduct\");\n        await updateData();\n    }\n    async function handleProductEdit(id)\n    {\n        await ipcRenderer.invoke(\"modal\",\"updateproduct\",id);\n        await updateData();\n    }\n    async function handleDelete(ids)\n    {\n        setDeleteRow(ids);\n    }\n    async function handleDeleteProduct()\n    {\n        await ipcRenderer.invoke(\"db\",{\n            action:\"delete\",\n            class:\"product\",\n            id:deleteRows instanceof Array ? deleteRows : [deleteRows]\n        });\n        await updateData();\n        setDeleteRow([]);\n    }\n    return <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n        <Box display=\"flex\" marginBottom=\"20px\">\n            <Beenhere style={verticalCenter}/>\n            <h3 style={{marginLeft:\"10px\",...verticalCenter}}>Tüm Ürünler</h3>\n            <Box marginLeft=\"auto\" marginY=\"auto\">\n                Arama:\n            </Box>\n            <TextField\n                InputProps={{\n                    startAdornment:(\n                        <InputAdornment position=\"start\">\n                            <Search/>\n                        </InputAdornment>\n                    )\n                }}\n                onKeyUp={e => doSearch(e.target.value)}\n                style={{marginLeft:\"10px\",...verticalCenter}}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"primary\" \n                style={{marginLeft:\"10px\",...verticalCenter}}\n                onClick={handleProductAdd}\n            >\n                <Add />\n                Ürün Ekle \n            </Button>\n        </Box>\n        <ProductGrid\n            onDeleteItem={handleDelete}\n            onEditItem={handleProductEdit}\n            row={rows}\n        />\n        <Dialog\n            open={deleteRows.length != 0}\n            onClose={() => setDeleteRow([])}\n        >\n            <DialogTitle>Dikkat !</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    {deleteRows.length} adet ürünü sistemden kaldırmak istiyor musunuz?\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button color=\"primary\" onClick={() => setDeleteRow([])}>\n                    İptal\n                </Button>\n                <Button color=\"secondary\" onClick={handleDeleteProduct}>\n                    Sil\n                </Button>\n            </DialogActions>\n        </Dialog>\n\n    </Box>\n}\nfunction ProductTabOptions(props)\n{\n    const [anchorEl, setAnchorEl] = useState(null);\n    const open = Boolean(anchorEl);\n  \n    const handleClick = (e) => {\n        setAnchorEl(e.target);\n    };\n    const handleEdit = e => {\n        handleClose();\n        props.onEditItem && props.onEditItem(props.row);\n    };\n    const handleDelete = e => {\n        handleClose();\n        props.onDeleteItem && props.onDeleteItem([props.row]);\n    };\n  \n    const handleClose = () => {\n      setAnchorEl(null);\n    };\n    return <>\n    <IconButton\n        onClick={handleClick}\n      >\n        <MoreVert />\n      </IconButton>\n      <Menu\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={handleEdit}>\n            Düzenle\n        </MenuItem>\n        <MenuItem onClick={handleDelete}>\n            Sil\n        </MenuItem>\n      </Menu>\n    </>\n}\n\nfunction ProductGrid(props)\n{\n    let [selectedItem,setSelectedItems] = useState([]);\n    function p(fiyat,vergi){\n        let perctangle = parseFloat(vergi) / 100;\n        let result = fiyat * perctangle;\n        let k = result.toString().split('.');\n        return k[0] + (k[1]?'.'+k[1].slice(0,2):'')\n    }\n    const handleSelected = e => {\n        setSelectedItems(e.rowIds);\n        props.onSelectionChanged && props.onSelectionChanged(e.rowIds);\n    };\n    const handleEdit = e => {\n        props.onEditItem && props.onEditItem(selectedItem[0]);\n    };\n    const handleEditMenu = e => {\n        props.onEditItem && props.onEditItem(e);\n    };\n    const handleDelete = e => {\n        props.onDeleteItem && props.onDeleteItem(e instanceof Array ? e : selectedItem);\n    };\n    return <>\n    <Box flex=\"1 1 auto\" display=\"flex\">\n        <DataGrid\n            checkboxSelection=\"true\"\n            showColumnRightBorder={true}\n            showCellRightBorder={true}\n            onSelectionChange={handleSelected}\n            columns={[\n                {\n                    field:\"id\",\n                    headerName:\"ID\",\n                    hide:true\n                },\n                {\n                    field:\"marka\",\n                    headerName:\"Marka\",\n                    flex:20\n                },\n                {\n                    field:\"model\",\n                    headerName:\"Model\",\n                    flex:20\n                },\n                {\n                    field:\"satisfiyati\",\n                    headerName:\"Fiyat\",\n                    flex:10,\n                    type:\"number\",\n                    renderCell:(e)=> e.value + \"TL\",\n                },\n                {\n                    field:\"renk\",\n                    headerName:\"Renk\",\n                    flex:20\n                },\n                {\n                    field:\"kdv\",\n                    headerName:\"K.D.V.\",\n                    flex:10,\n                    type:\"number\",\n                    renderCell:(e)=> e.value + \"% (\" + p(e.row.satisfiyati,e.value) + \"TL)\",\n                },\n                {\n                    field:\"stok\",\n                    headerName:\"Stok Adedi\",\n                    flex:10,\n                    type:\"number\",\n                    renderCell:(e)=> e.value + \" Adet\",\n                },\n                {\n                    field:\"I\",\n                    headerName:\" \",\n                    renderCell:(e)=> <ProductTabOptions row={e.row.id} onEditItem={handleEditMenu} onDeleteItem={handleDelete} />,\n                    flex:5,\n                    sortable:false,\n                    filterable:false\n                }\n            ]}\n            rows={props.row}\n        />\n    </Box>\n    {selectedItem.length != 0 && <Box flex=\"0 0 auto\" display=\"flex\" marginTop=\"10px\">\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleDelete}>\n            <Remove />\n            Seçileni Sil\n        </Button>\n        {selectedItem.length == 1 && <Button variant=\"contained\" color=\"secondary\" style={{backgroundColor:\"#00dd00\",marginLeft:\"10px\"}} onClick={handleEdit}>\n            <Description />\n            Seçileni Düzenle\n        </Button>}\n        <Button variant=\"outlined\" style={{marginLeft:\"10px\"}} onClick={handleEdit} >\n            <Description />\n            Fatura Oluştur\n        </Button>\n    </Box>}\n    </>\n}","/home/abdussamed/Krex/src/products/AddProduct.js",[],"/home/abdussamed/Krex/src/products/UpdateProduct.js",["37","38"],"import { useEffect, useState } from \"react\";\nimport {Box, Button, TextField} from \"@material-ui/core\";\nimport {Alert} from \"@material-ui/lab\";\nlet {ipcRenderer} = window.require(\"electron\");\n\nexport default function UpdateProduct(props)\n{\n    let [errorMessage,setErrorMessage] = useState(false);\n    let [successMessage,setSuccessMessage] = useState(false);\n    let [showSave,setShowSave] = useState(false);\n    let [product,setDetails] = useState({\n        isim:\"\",\n        marka:\"\",\n        model:\"\",\n        barkod:\"\",\n        satisfiyati:\"\",\n        alisfiyati:\"\",\n        kdv:\"\",\n        renk:\"\",\n        stok:\"\",\n        descript:\"\"\n    });\n    useEffect(function(){\n        ipcRenderer.invoke(\"db\",{\n            action:\"get\",\n            class:\"product\",\n            id:props.args[0]\n        }).then(_product => setDetails(_product))\n    },[props.args[0]]);\n    function handleChange(name,value){\n        let nproduct = {\n            ...product,\n            [name]:value\n        };\n        setDetails(nproduct)\n        setErrorMessage(false);\n        setSuccessMessage(false);\n        setShowSave(nproduct.isim && parseInt(nproduct.satisfiyati) > 0 && parseInt(nproduct.stok) > 0)\n    };\n    async function handleClick()\n    {\n        setErrorMessage(false);\n        setSuccessMessage(false);\n        if(\n            !product.isim||\n            !product.satisfiyati\n        ){\n            setErrorMessage(\"Ürün ismi ve fiyatı zorunlu alanlardır\");\n            return;\n        };\n        await ipcRenderer.invoke(\"db\",{\n            action:\"update\",\n            class:\"product\",\n            id:props.args[0],\n            data:product\n        });\n        setSuccessMessage(\"Bilgiler Başarıyla Güncellendi\");\n        setTimeout(function(){\n            ipcRenderer.send(\"reply\",true)\n        },500)\n    }\n\n    document.title = \"Ürün Güncelleme Formu\";\n    let styles = {\n        marginTop:\"auto\",\n        marginBottom:\"auto\"\n    };\n\n    return <>\n        <Box height=\"100%\" display=\"flex\">\n            <Box width=\"350px\" height=\"90vh\" margin=\"auto\" display=\"flex\" flexDirection=\"column\">\n                <Box style={styles} fontSize=\"h4.fontSize\" marginBottom=\"50px\" textAlign=\"center\">\n                    Ürün Bilgileri\n                </Box>\n                <Box style={styles} display=\"flex\" flexDirection=\"row\">\n                    <Box marginBottom=\"10px\" flex=\"1 1 auto\">\n                        <TextField value={product.isim} label=\"Ürün İsmi\" fullWidth ariant=\"outlined\" onChange={e=>handleChange(\"isim\",e.target.value)} autoFocus/>\n                    </Box>\n                </Box>\n                <Box style={styles} display=\"flex\" flexDirection=\"row\">\n                    <Box marginBottom=\"10px\" flex=\"1 1 auto\">\n                        <TextField value={product.marka} label=\"Ürün Markası\" fullWidth ariant=\"outlined\" onChange={e=>handleChange(\"marka\",e.target.value)}/>\n                    </Box>\n                    <Box marginBottom=\"10px\" marginLeft=\"10px\" flex=\"1 1 auto\">\n                        <TextField value={product.model} label=\"Ürün Modeli\" fullWidth ariant=\"outlined\" onChange={e=>handleChange(\"model\",e.target.value)}/>\n                    </Box>\n                </Box>\n                <Box style={styles} display=\"flex\" flexDirection=\"row\" marginBottom=\"10px\">\n                    <Box marginBottom=\"10px\" flex=\"1 1 auto\">\n                        <TextField value={product.alisfiyati} type=\"number\" label=\"Ürün Alış Fiyatı\" fullWidth ariant=\"outlined\" onChange={e=>handleChange(\"alisfiyati\",e.target.value)}/>\n                    </Box>\n                    <Box marginLeft=\"10px\" flex=\"1 1 auto\">\n                        <TextField value={product.satisfiyati} type=\"number\" label=\"Ürün Satış Fiyatı\" fullWidth ariant=\"outlined\" onChange={e=>handleChange(\"satisfiyati\",e.target.value)}/>\n                    </Box>\n                </Box>\n                <Box style={styles} display=\"flex\" flexDirection=\"row\" marginBottom=\"10px\">\n                    <Box marginBottom=\"10px\" flex=\"1 1 auto\">\n                        <TextField value={product.kdv} type=\"number\" label=\"Katkı Değer Vegisi (%)\" fullWidth ariant=\"outlined\" onChange={e=>handleChange(\"kdv\",e.target.value)}/>\n                    </Box>\n                    <Box marginLeft=\"10px\" flex=\"1 1 auto\">\n                        <TextField value={product.stok} type=\"number\" label=\"Stok Adedi\" fullWidth ariant=\"outlined\" onChange={e=>handleChange(\"stok\",e.target.value)}/>\n                    </Box>\n                </Box>\n                <Box style={styles} display=\"flex\" flexDirection=\"row\" marginBottom=\"10px\">\n                    <Box marginBottom=\"10px\" flex=\"1 1 auto\">\n                        <TextField value={product.barkod} label=\"Ürün Barkod\" fullWidth ariant=\"outlined\" onChange={e=>handleChange(\"barkod\",e.target.value)}/>\n                    </Box>\n                    <Box marginLeft=\"10px\" flex=\"1 1 auto\">\n                        <TextField value={product.renk} label=\"Ürün Rengi\" fullWidth ariant=\"outlined\" onChange={e=>handleChange(\"renk\",e.target.value)}/>\n                    </Box>\n                </Box>\n                <Box style={styles} display=\"flex\" flexDirection=\"row\" marginBottom=\"10px\">\n                    <Box marginBottom=\"10px\" flex=\"1 1 auto\">\n                        <TextField value={product.descript} multiline rows=\"3\" label=\"Açıklama\" fullWidth ariant=\"outlined\" onChange={e=>handleChange(\"descript\",e.target.value)}/>\n                    </Box>\n                </Box>\n                {!successMessage && showSave && <Box style={styles} textAlign=\"center\">\n                    <Button variant=\"outlined\" color=\"primary\" style={{marginTop:\"auto\"}} onClick={handleClick}>\n                        Güncelle\n                    </Button>\n                </Box>}\n                <Box style={styles} textAlign=\"center\">\n                    {errorMessage ? <Alert severity=\"warning\">{errorMessage}</Alert> : null}\n                    {successMessage ? <Alert severity=\"success\">{successMessage}</Alert> : null}\n                </Box>\n            </Box>\n        </Box>\n    </>\n}",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":3,"column":10,"nodeType":"45","messageId":"46","endLine":3,"endColumn":20},{"ruleId":"43","severity":1,"message":"47","line":4,"column":48,"nodeType":"45","messageId":"46","endLine":4,"endColumn":60},{"ruleId":"48","severity":1,"message":"49","line":24,"column":24,"nodeType":"50","messageId":"51","endLine":24,"endColumn":26},{"ruleId":"48","severity":1,"message":"52","line":101,"column":37,"nodeType":"50","messageId":"51","endLine":101,"endColumn":39},{"ruleId":"48","severity":1,"message":"52","line":247,"column":26,"nodeType":"50","messageId":"51","endLine":247,"endColumn":28},{"ruleId":"48","severity":1,"message":"49","line":252,"column":30,"nodeType":"50","messageId":"51","endLine":252,"endColumn":32},{"ruleId":"53","severity":1,"message":"54","line":29,"column":7,"nodeType":"55","endLine":29,"endColumn":22,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"57","line":29,"column":8,"nodeType":"58","endLine":29,"endColumn":21},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'ApiContext' is defined but never used.","Identifier","unusedVar","'PinDropSharp' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.args'. Either include it or remove the dependency array.","ArrayExpression",["61"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},"Update the dependencies array to be: [props.args]",{"range":"64","text":"65"},[848,863],"[props.args]"]