[{"/home/abdussamed/Krex/src/index.js":"1","/home/abdussamed/Krex/src/Login.js":"2","/home/abdussamed/Krex/src/Main.js":"3","/home/abdussamed/Krex/src/products/ProductTab.js":"4","/home/abdussamed/Krex/src/products/AddProduct.js":"5","/home/abdussamed/Krex/src/client/ClientTab.js":"6","/home/abdussamed/Krex/src/client/AddClient.js":"7","/home/abdussamed/Krex/src/products/EditProduct.js":"8","/home/abdussamed/Krex/src/client/EditClient.js":"9"},{"size":1538,"mtime":1612704823870,"results":"10","hashOfConfig":"11"},{"size":2385,"mtime":1612645207102,"results":"12","hashOfConfig":"11"},{"size":3548,"mtime":1612686896776,"results":"13","hashOfConfig":"11"},{"size":8743,"mtime":1612704500212,"results":"14","hashOfConfig":"11"},{"size":4940,"mtime":1612709423681,"results":"15","hashOfConfig":"11"},{"size":8337,"mtime":1612705381617,"results":"16","hashOfConfig":"11"},{"size":4049,"mtime":1612688920309,"results":"17","hashOfConfig":"11"},{"size":7154,"mtime":1612709237200,"results":"18","hashOfConfig":"11"},{"size":6562,"mtime":1612706227919,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1qu3ghz",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"22"},"/home/abdussamed/Krex/src/index.js",[],["45","46"],"/home/abdussamed/Krex/src/Login.js",[],"/home/abdussamed/Krex/src/Main.js",["47"],"import {Tab, Tabs,Box, Divider,Icon} from \"@material-ui/core\";\nimport {\n    AssignmentInd, Beenhere, CloudDownloadOutlined, Description, History, Person, PhoneInTalk, SaveAlt, Settings, ShoppingCart\n} from \"@material-ui/icons\";\nimport \"./styles/Login.css\";\nimport { useState } from \"react\";\n\n\nimport ProductTab from \"./products/ProductTab\";\nimport ClientTab from \"./client/ClientTab\";\n\nexport default function MainScreen()\n{\n    let [value,setValue] = useState(1);\n    function handleChange(a,newValue){\n        console.log(newValue);\n        setValue(newValue)\n    }\n    return <Box display=\"flex\" flexBasis=\"row\" height=\"100%\" overflow=\"auto\">\n        <Box flex=\"0 0 auto\" width=\"200px\" height=\"100%\" overflow=\"auto\" style={{boxShadow:\"0 0 60px -30px black\"}}>\n            <Tabs\n                orientation=\"vertical\"\n                variant=\"scrollable\"\n                value={value}\n                scrollButtons=\"auto\"\n                onChange={handleChange}\n                style={{height:\"100%\"}}\n            >\n                <Tab tabIndex=\"0\" label=\"Faturalar\" icon={<Description/>} />\n                <Tab tabIndex=\"1\" label=\"Ürünler\" icon={<Beenhere/>} />\n                <Tab tabIndex=\"2\" label=\"Müşteriler\" icon={<AssignmentInd/>} />\n                <Tab tabIndex=\"3\" label=\"Stoklar\" icon={<SaveAlt />} />\n                <Tab tabIndex=\"4\" label=\"Satıcılar\" icon={<ShoppingCart/>} />\n                <Divider />\n                <Tab tabIndex=\"5\" label=\"Kullanıcılar\" icon={<Person/>} />\n                <Tab tabIndex=\"6\" label=\"Telefon Numaraları\" icon={<PhoneInTalk/>}/>\n                <Divider />\n                <Tab tabIndex=\"7\" label=\"Son işlemler\" icon={<History/>} />\n                <Tab tabIndex=\"8\" label=\"Yedekleme\" icon={<Icon className=\"fa fa-refresh fa-2x\"/>} />\n                <Tab tabIndex=\"9\" label=\"Güncellemeler\" icon={<CloudDownloadOutlined/>} />\n                <Tab tabIndex=\"10\" label=\"Ayarlar\" icon={<Settings/>}/>\n            </Tabs>\n        </Box>\n        <Box flex=\"1 1 auto\" padding=\"20px\">\n            <TabPanel value={value} index={0} title=\"Faturalar\">\n                0\n            </TabPanel>\n            <TabPanel value={value} index={1} title=\"Ürünler\">\n                <ProductTab />\n            </TabPanel>\n            <TabPanel value={value} index={2} title=\"Müşteriler\">\n                <ClientTab />\n            </TabPanel>\n            <TabPanel value={value} index={3} title=\"Stoklar\">\n                3\n            </TabPanel>\n            <TabPanel value={value} index={4} title=\"Satıcılar\">\n                4\n            </TabPanel>\n            <TabPanel value={value} index={6} title=\"Kullanıcılar\">\n                5\n            </TabPanel>\n            <TabPanel value={value} index={7} title=\"Telefon Numaraları\">\n                5\n            </TabPanel>\n            <TabPanel value={value} index={9} title=\"Son işlemler\">\n                6\n            </TabPanel>\n            <TabPanel value={value} index={10} title=\"Yedekleme\">\n                6\n            </TabPanel>\n            <TabPanel value={value} index={11} title=\"Güncellemeler\">\n                7\n            </TabPanel>\n            <TabPanel value={value} index={12} title=\"Ayarlar\">\n                7\n            </TabPanel>\n        </Box>\n    </Box>;\n}\nfunction TabPanel(props)\n{\n    let isActive = props.value == props.index;\n    if(isActive) document.title = props.title;\n    return <Box display={isActive ? \"block\" : \"none\"} overflow=\"auto\" height=\"100%\">\n        {props.children}\n    </Box>;\n}","/home/abdussamed/Krex/src/products/ProductTab.js",["48","49","50","51","52"],"import {\n    Box,\n\tButton,\n\tDialog,\n\tDialogActions,\n\tDialogContentText,\n\tDialogContent,\n\tDialogTitle,\n\tIconButton,\n\tInputAdornment,\n\tMenu,MenuItem,\n    TextField,\n    Snackbar,\n    Slide\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { Add, Beenhere, MoreVert, Remove, Search } from \"@material-ui/icons\";\nimport { useEffect, useState } from \"react\";\nimport \"moment/locale/tr\";\nimport moment from \"moment\";\nimport { Alert } from \"@material-ui/lab\";\n\nlet { ipcRenderer } = window.require(\"electron\");\nmoment().locale(\"tr\")\nexport default function ProductTab(props)\n{\n    let [datas,setData] = useState([]);\n    let [update,letUpdate] = useState(0);\n    let [selectedRows,setSelectedRows] = useState([]);\n    let [removeModal,enableRemoveModal] = useState(false);\n    let [messager,setMessager] = useState({open:false});\n\n\n    useEffect(function(){\n        ipcRenderer.invoke(\"db-get-products\",{limit:1000}).then(function(_datas){\n            setData(_datas)\n        })\n    },[update]);\n    let verticalCenter =  {marginTop:\"auto\",marginBottom:\"auto\"};\n    let verticalCenterR =  {...verticalCenter,marginRight:\"15px\"};\n\n    function search(e)\n    {\n        clearInterval(search.timer);\n        if(e.target.value)\n        {\n            search.timer = setTimeout(function(){\n                ipcRenderer.invoke(\"db-get-products\",{search:e.target.value,limit:1000}).then(function(_datas){\n                    setData(_datas)\n                })\n            },250)\n        }else{\n            ipcRenderer.invoke(\"db-get-products\",{limit:1000}).then(function(_datas){\n                setData(_datas)\n            })\n        }\n    };\n    function removeBtn(id)\n    {\n        if(typeof id == \"string\") setSelectedRows([id]);\n        enableRemoveModal(true);\n    }\n    async function editBtn(id)\n    {\n        await editProductModal(id);\n        letUpdate(update + 1);\n    }\n    \n    async function acceptDelete()\n    {\n        await ipcRenderer.invoke(\"db-delete-products\",selectedRows);\n        enableRemoveModal(false);\n        letUpdate(update + 1);\n        setMessager({\n            open:true,\n            message:\"Silme işlemi başarılı !\",\n            status: \"success\"\n        })\n    }\n    function cancelDelete()\n    {\n        enableRemoveModal(false);\n    }\n    search.timer = null;\n\n    return <>\n        <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n            <Box display=\"flex\" marginBottom=\"20px\">\n                <Beenhere style={verticalCenter}/>\n                <h3 style={{marginLeft:\"10px\",...verticalCenter,marginRight:\"auto\"}}>Tüm Ürünler</h3>\n                <div\n                    style={verticalCenterR}\n                >\n                    Arama\n                </div>\n                <TextField\n                    InputProps={{\n                        startAdornment:<InputAdornment position=\"start\"><Search /></InputAdornment>,\n                    }}\n                    style={verticalCenterR}\n                    onKeyUp={search}\n                    marginRight=\"10px\"\n                />\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\" \n                    style={verticalCenter}\n                    onClick={async () => {\n                        await addProductModal();\n                        letUpdate(update + 1);\n                    }}\n                >\n                    <Add />\n                    Ürün Ekle \n                </Button>\n            </Box>\n            <Box flex=\"1 1 auto\" display=\"flex\">\n                <ProductDataGrid\n                    data={datas}\n                    selectEvent={p => setSelectedRows(p)}\n                    onDeleteProduct={removeBtn}\n                    onEditProduct={editBtn}\n                />\n            </Box>\n            {selectedRows.length != 0 && <Box flex=\"0 0 40px\" display=\"flex\" marginTop=\"20px\">\n                <Button variant=\"contained\" color=\"secondary\" onClick={removeBtn}><Remove /> Hepsini Sil</Button>\n            </Box>}\n        </Box>\n        {messager?.open && <Snackbar\n            open={true}\n            autoHideDuration={messager.duration}\n            onClose={()=>setMessager(false)}\n            TransitionComponent={props => <Slide {...props} direction=\"up\" />}\n            message={messager.message}\n        />}\n        <RemoveHelperModal\n            count={selectedRows.length || 1}\n            open={removeModal}\n            cancel={cancelDelete}\n            accept={acceptDelete}\n        />\n    </>\n}\nfunction RemoveHelperModal(props)\n{\n    return <>\n        <Dialog\n            open={props.open}\n            onClose={props.close}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">Ürün Silme İşlemi</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    {props.count} adet ürünü gerçekten silmek istiyor musunuz ?\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.cancel} color=\"primary\" autoFocus>\n                    İptal\n                </Button>\n                <Button onClick={props.accept} color=\"secondary\">\n                    Evet, {props.count} öğeyi Sil\n                </Button>\n            </DialogActions>\n        </Dialog>\n    </>;\n}\nfunction ProductDataGrid(props)\n{\n    return <DataGrid\n        onSelectionChange={p=>props?.selectEvent(p.rowIds)}\n        checkboxSelection=\"true\"\n        showColumnRightBorder={true}\n        showCellRightBorder={true}\n        columns={[\n            {\n                field:\"id\",\n                headerName:\"ID\",\n                hide:true\n            },\n            {\n                field:\"isim\",\n                headerName:\"İsim\",\n                flex:30\n            },\n            {\n                field:\"marka\",\n                headerName:\"Marka\",\n                flex:20\n            },\n            {\n                field:\"model\",\n                headerName:\"Model\",\n                flex:20\n            },\n            {\n                field:\"birimfiyat\",\n                headerName:\"Fiyat\",\n                renderCell:(e) => e.row.birimfiyati + \" TL\",\n                flex:10,\n                sortComparator:(v1,v2)=> onlyNum(v1) - onlyNum(v2)\n            },\n            {\n                field:\"renk\",\n                headerName:\"Renk\",\n                flex:20\n            },\n            {\n                field:\"kdv\",\n                headerName:\"K.D.V.\",\n                flex:20,\n                sortComparator:(v1,v2)=> onlyNum(v1) - onlyNum(v2),\n                renderCell:e => e.row.kdv + \"%\",\n            },\n            {\n                field:\"createdate\",\n                headerName:\"Ekleme Tarihi\",\n                renderCell: e => moment(e.row.createdate).fromNow(),\n                flex:10\n            },\n            {\n                field:\"I\",\n                headerName:\" \",\n                renderCell:(e)=> <ProductTabOptions onDeleteProduct={i=>props.onDeleteProduct(e.row.id)} onEditProduct={i=>props.onEditProduct(e.row.id)}/>,\n                flex:5,\n                sortable:false,\n                filterable:false\n            }\n        ]}\n        rows={props.data}\n    />\n}\nfunction onlyNum(t)\n{\n    try{\n        return parseFloat(/([\\d\\.\\,]+)/i.exec(t)[1])\n    }catch(i){\n        let T = parseFloat(t);\n        if(Number.isNaN(T)){\n            T = new Number(t);\n            if(Number.isNaN(T)){\n                return 0\n            }else return T\n        }else return T\n    }\n}\nfunction ProductTabOptions(props)\n{\n    const [anchorEl, setAnchorEl] = useState(null);\n    const open = Boolean(anchorEl);\n  \n    const handleClick = (event) => {\n      setAnchorEl(event.currentTarget);\n    };\n    function Edit()\n    {\n        handleClose();\n        props.onEditProduct && props.onEditProduct();\n    }\n    function Delete()\n    {\n        handleClose();\n        props.onDeleteProduct && props.onDeleteProduct();\n    }\n    \n    const handleClose = () => {\n      setAnchorEl(null);\n    };\n    return <>\n    <IconButton\n        onClick={handleClick}\n      >\n        <MoreVert />\n      </IconButton>\n      <Menu\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={Edit}>\n            Düzenle\n        </MenuItem>\n        <MenuItem onClick={Delete}>\n            Sil\n        </MenuItem>\n      </Menu>\n    </>\n}\n\nasync function addProductModal()\n{\n    await ipcRenderer.invoke(\"addproduct-modal\")\n}\nasync function editProductModal(id)\n{\n    await ipcRenderer.invoke(\"editproduct-modal\",id)\n}","/home/abdussamed/Krex/src/products/AddProduct.js",[],"/home/abdussamed/Krex/src/client/ClientTab.js",["53","54","55","56"],"import {\n    Box,\n\tButton,\n\tDialog,\n\tDialogActions,\n\tDialogContentText,\n\tDialogContent,\n\tDialogTitle,\n\tIconButton,\n\tInputAdornment,\n\tMenu,MenuItem,\n    TextField,\n    Snackbar,\n    Slide\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { Add, AssignmentInd, MoreVert, Remove, Search } from \"@material-ui/icons\";\nimport { useEffect, useState } from \"react\";\nimport \"moment/locale/tr\";\nimport moment from \"moment\";\nlet { ipcRenderer } = window.require(\"electron\");\nmoment().locale(\"tr\")\nexport default function ProductTab(props)\n{\n    let [datas,setData] = useState([]);\n    let [update,letUpdate] = useState(0);\n    let [selectedRows,setSelectedRows] = useState([]);\n    let [removeModal,enableRemoveModal] = useState(false);\n    let [messager,setMessager] = useState({open:false});\n\n\n    useEffect(function(){\n        ipcRenderer.invoke(\"db-get-clients\",{limit:1000}).then(function(_datas){\n            setData(_datas)\n        })\n    },[update]);\n    let verticalCenter =  {marginTop:\"auto\",marginBottom:\"auto\"};\n    let verticalCenterR =  {...verticalCenter,marginRight:\"15px\"};\n\n    function search(e)\n    {\n        clearInterval(search.timer);\n        if(e.target.value)\n        {\n            search.timer = setTimeout(function(){\n                ipcRenderer.invoke(\"db-get-clients\",{search:e.target.value,limit:1000}).then(function(_datas){\n                    setData(_datas)\n                })\n            },250)\n        }else{\n            ipcRenderer.invoke(\"db-get-clients\",{limit:1000}).then(function(_datas){\n                setData(_datas)\n            })\n        }\n    };\n    function removeBtn(id)\n    {\n        if(typeof id == \"string\") setSelectedRows([id]);\n        enableRemoveModal(true);\n    }\n    async function editBtn(id)\n    {\n        await editClientModal(id);\n        letUpdate(update + 1);\n    }\n    async function acceptDelete()\n    {\n        await ipcRenderer.invoke(\"db-delete-clients\",selectedRows);\n        enableRemoveModal(false);\n        letUpdate(update + 1);\n        setMessager({\n            open:true,\n            message:\"Silme işlemi başarılı !\",\n            status: \"success\"\n        })\n    }\n    function cancelDelete()\n    {\n        enableRemoveModal(false);\n    }\n    search.timer = null;\n\n    return <>\n        <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\n            <Box display=\"flex\" marginBottom=\"20px\">\n                <AssignmentInd style={verticalCenter}/>\n                <h3 style={{marginLeft:\"10px\",...verticalCenter,marginRight:\"auto\"}}>Tüm Müşteriler</h3>\n                <div\n                    style={verticalCenterR}\n                >\n                    Arama\n                </div>\n                <TextField\n                    InputProps={{\n                        startAdornment:<InputAdornment position=\"start\"><Search /></InputAdornment>,\n                    }}\n                    style={verticalCenterR}\n                    onKeyUp={search}\n                    marginRight=\"10px\"\n                />\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\" \n                    style={verticalCenter}\n                    onClick={async () => {\n                        await addClientModal();\n                        letUpdate(update + 1);\n                    }}\n                >\n                    <Add />\n                    Müşteri Ekle \n                </Button>\n            </Box>\n            <Box flex=\"1 1 auto\" display=\"flex\">\n                <ProductDataGrid\n                    data={datas}\n                    selectEvent={p => setSelectedRows(p)}\n                    onDeleteProduct={removeBtn}\n                    onEditClient={editBtn}\n                />\n            </Box>\n            {selectedRows.length != 0 && <Box flex=\"0 0 40px\" display=\"flex\" marginTop=\"20px\">\n                <Button variant=\"contained\" color=\"secondary\" onClick={removeBtn}><Remove /> Hepsini Sil</Button>\n            </Box>}\n        </Box>\n        {messager?.open && <Snackbar\n            open={true}\n            autoHideDuration={messager.duration}\n            onClose={()=>setMessager(false)}\n            TransitionComponent={props => <Slide {...props} direction=\"up\" />}\n            message={messager.message}\n        />}\n        <RemoveHelperModal\n            count={selectedRows.length || 1}\n            open={removeModal}\n            cancel={cancelDelete}\n            accept={acceptDelete}\n        />\n    </>\n}\nfunction RemoveHelperModal(props)\n{\n    return <>\n        <Dialog\n            open={props.open}\n            onClose={props.close}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">Müşteri Silme İşlemi</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    {props.count} adet müşteriyi gerçekten silmek istiyor musunuz ?\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.cancel} color=\"primary\" autoFocus>\n                    İptal\n                </Button>\n                <Button onClick={props.accept} color=\"secondary\">\n                    Evet, {props.count} öğeyi Sil\n                </Button>\n            </DialogActions>\n        </Dialog>\n    </>;\n}\nfunction ProductDataGrid(props)\n{\n    return <DataGrid\n        onSelectionChange={p=>props?.selectEvent(p.rowIds)}\n        checkboxSelection=\"true\"\n        showColumnRightBorder={true}\n        showCellRightBorder={true}\n        columns={[\n            {\n                field:\"id\",\n                headerName:\"ID\",\n                hide:true\n            },\n            {\n                field:\"isim\",\n                headerName:\"İsim\",\n                renderCell:e => e.row.isim + \" \" +e.row.soyisim,\n                flex:30\n            },\n            {\n                field:\"telefon\",\n                headerName:\"Telefon No.\",\n                flex:20\n            },\n            {\n                field:\"email\",\n                headerName:\"E-Mail Adresi\",\n                flex:20\n            },\n            {\n                field:\"address\",\n                headerName:\"Adres\",\n                flex:20\n            },\n            {\n                field:\"balance\",\n                headerName:\"Borç\",\n                flex:10,\n                renderCell:(e) => e.row.balance + \" TL\",\n                sortComparator:(v1,v2)=> onlyNum(v1) - onlyNum(v2)\n            },\n            {\n                field:\"I\",\n                headerName:\" \",\n                renderCell:(e)=> <ClientTabOptions onDeleteClient={i=>props.onDeleteProduct(e.row.id)} onEditClient={i=>props.onEditClient(e.row.id)} />,\n                flex:5,\n                sortable:false,\n                filterable:false\n            }\n        ]}\n        rows={props.data}\n    />\n}\nfunction onlyNum(t)\n{\n    try{\n        return parseFloat(/([\\d\\.\\,]+)/i.exec(t)[1])\n    }catch(i){\n        let T = parseFloat(t);\n        if(Number.isNaN(T)){\n            T = new Number(t);\n            if(Number.isNaN(T)){\n                return 0\n            }else return T\n        }else return T\n    }\n}\nfunction ClientTabOptions(props)\n{\n    const [anchorEl, setAnchorEl] = useState(null);\n    const open = Boolean(anchorEl);\n  \n    const handleClick = (event) => {\n      setAnchorEl(event.currentTarget);\n    };\n    function Edit()\n    {\n        handleClose();\n        props.onEditClient && props.onEditClient();\n    }\n    function Delete()\n    {\n        handleClose();\n        props.onDeleteClient && props.onDeleteClient();\n    }\n    \n    const handleClose = () => {\n      setAnchorEl(null);\n    };\n    return <>\n    <IconButton\n        onClick={handleClick}\n      >\n        <MoreVert />\n      </IconButton>\n      <Menu\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={Edit}>\n            Düzenle\n        </MenuItem>\n        <MenuItem onClick={Delete}>\n            Sil\n        </MenuItem>\n      </Menu>\n    </>\n}\n\nasync function addClientModal()\n{\n    await ipcRenderer.invoke(\"addclient-modal\")\n}\nasync function editClientModal(id)\n{\n    await ipcRenderer.invoke(\"editclient-modal\",id)\n}",["57","58"],"/home/abdussamed/Krex/src/client/AddClient.js",["59"],"import { useState } from \"react\";\nimport {Backdrop, Box, Button, CircularProgress, TextField} from \"@material-ui/core\";\nlet {ipcRenderer} = window.require(\"electron\");\n/*\n    isim\n    soyisim\n    telefon\n    email\n    address\n    balance\n    age\n    descript\n    createdate\n    updatedate\n    deletedate\n*/\nexport default function AddClientScreen()\n{\n    let\n        [isim,setisim] = useState(\"\"),\n        [soyisim,setsoyisim] = useState(\"\"),\n        [telefon,settelefon] = useState(\"\"),\n        [email,setemail] = useState(\"\"),\n        [address,setaddress] = useState(0),\n        [balance,setbalance] = useState(0),\n        [age,setage] = useState(\"\"),\n        [descript,setdescript] = useState(\"\"),\n        [showSpin,setShowSpin] = useState(false);\n    document.title = \"Yeni Müşteri Ekleme\";\n    function saveClient()\n    {\n        setShowSpin(true);\n        let client = {\n            isim:isim,\n            soyisim:soyisim,\n            telefon:telefon,\n            email:email,\n            address:address,\n            balance:balance,\n            age:age,\n            descript:descript\n        };\n        ipcRenderer.invoke(\"db-insert-client\",client).then(function(){\n            setShowSpin(false);\n            setTimeout(function(){\n                ipcRenderer.send(\"reply\",client);\n            },500)\n        })\n    };\n    return <>\n        <Backdrop open={showSpin} appear=\"\">\n            <CircularProgress color=\"primary\" />\n        </Backdrop>\n        <Box height=\"100%\" display=\"flex\">\n            <Box height=\"100%\" width=\"100%\" marginX=\"20px\" display=\"flex\" flexDirection=\"column\">\n\n                <Box display=\"flex\" flexDirection=\"row\" marginY=\"auto\">\n                    <Box flex=\"1 1 auto\">\n                        <TextField onChange={e=>setisim(e.target.value)} label=\"İsim\" marginBottom=\"10px\" fullWidth ariant=\"outlined\"/>\n                    </Box>\n                    <Box flex=\"1 1 auto\" marginLeft=\"20px\">\n                        <TextField onChange={e=>setsoyisim(e.target.value)} label=\"Soyisim\" marginBottom=\"10px\" fullWidth ariant=\"outlined\"/>\n                    </Box>\n                </Box>\n                <Box display=\"flex\" flexDirection=\"row\" marginY=\"auto\">\n                    <Box flex=\"1 1 auto\">\n                        <TextField onChange={e=>settelefon(e.target.value)} label=\"Telefon\" marginBottom=\"10px\" fullWidth ariant=\"outlined\"/>\n                    </Box>\n                    <Box flex=\"1 1 auto\" marginLeft=\"20px\">\n                        <TextField onChange={e=>setemail(e.target.value)} label=\"E-Mail Adresi\" marginBottom=\"10px\" fullWidth ariant=\"outlined\"/>\n                    </Box>\n                </Box>\n                <Box display=\"flex\" flexDirection=\"row\" marginY=\"auto\">\n                    <Box flex=\"1 1 auto\">\n                        <TextField onChange={e=>setaddress(e.target.value)} label=\"Adres\" marginBottom=\"10px\" fullWidth ariant=\"outlined\"/>\n                    </Box>\n                    <Box flex=\"1 1 auto\" marginLeft=\"20px\">\n                        <TextField onChange={e=>setbalance(e.target.value)} label=\"Harici Borç\" marginBottom=\"10px\" fullWidth ariant=\"outlined\"/>\n                    </Box>\n                </Box>\n\n                <Box display=\"flex\" flexDirection=\"row\" marginY=\"auto\">\n                    <Box flex=\"1 1 auto\">\n                        <TextField onChange={e=>setdescript(e.target.value)} label=\"Açıklama\" rows=\"5\" marginBottom=\"10px\" fullWidth ariant=\"outlined\" multiline/>\n                    </Box>\n                </Box>\n               <Box display=\"flex\" marginBottom=\"10px\">\n                    <Button variant=\"outlined\" color=\"primary\" style={{marginTop:\"auto\"}} onClick={saveClient}>\n                        Kaydet\n                    </Button>\n                    <Button variant=\"outlined\" color=\"secondary\" style={{marginTop:\"auto\",marginLeft:\"auto\"}} onClick={()=>ipcRenderer.send(\"reply\",false)}>\n                        İptal\n                    </Button>\n               </Box>\n            </Box>\n        </Box>\n    </>\n}","/home/abdussamed/Krex/src/products/EditProduct.js",[],"/home/abdussamed/Krex/src/client/EditClient.js",["60"],"import { useEffect, useState } from \"react\";\nimport {Backdrop, Box, Button, CircularProgress, TextField } from \"@material-ui/core\";\nlet {ipcRenderer}= window.require(\"electron\");\n/*\n    isim\n    soyisim\n    telefon\n    email\n    address\n    balance\n    age\n    descript\n    createdate\n    updatedate\n    deletedate\n*/\nexport default function EditClientScreen(props)\n{\n    let [spinner,setSpinner] = useState(true);\n    let\n        [id,setid] = useState(\"\"),\n        [isim,setisim] = useState(\"\"),\n        [soyisim,setsoyisim] = useState(\"\"),\n        [telefon,settelefon] = useState(\"\"),\n        [email,setemail] = useState(\"\"),\n        [address,setaddress] = useState(0),\n        [balance,setbalance] = useState(0),\n        [age,setage] = useState(\"\"),\n        [descript,setDescript] = useState(\"\");\n    document.title = \"Müşteri Düzenleme\";\n    useEffect(function(){\n        if(props[0])\n        {\n            ipcRenderer.invoke(\"db-get-client\",props[0]).then(client => {\n                setid(client.id)\n                setisim(client.isim)\n                setsoyisim(client.soyisim)\n                settelefon(client.telefon)\n                setemail(client.email)\n                setaddress(client.address)\n                setbalance(client.balance)\n                setDescript(client.descript)\n                setSpinner(false)\n            })\n        }\n    },[props])\n    function updateClient()\n    {\n        setSpinner(true);\n        let client = {\n            id:id,\n            isim:isim,\n            soyisim:soyisim,\n            telefon:telefon,\n            email:email,\n            address:address,\n            balance:balance,\n            age:age,\n            descript:descript\n        };\n        ipcRenderer.invoke(\"db-update-client\",client).then(function(){\n            setSpinner(false);\n            setTimeout(function(){\n                ipcRenderer.send(\"reply\",client);\n            },500)\n        })\n    };\n    return <>\n        {spinner ? <Backdrop open={true} appear=\"\">\n            <CircularProgress color=\"primary\" />\n        </Backdrop> : \n            <Box height=\"100%\" display=\"flex\">\n                <Box height=\"100%\" width=\"100%\" marginX=\"20px\" display=\"flex\" flexDirection=\"column\">\n\n                    <Box display=\"flex\" flexDirection=\"row\" marginY=\"auto\">\n                        <Box flex=\"1 1 auto\">\n                            <TextField\n                                onChange={e=>setisim(e.target.value)}\n                                value={isim}\n                                label=\"İsim\"\n                                marginBottom=\"10px\"\n                                fullWidth\n                                ariant=\"outlined\"\n                            />\n                        </Box>\n                        <Box flex=\"1 1 auto\" marginLeft=\"20px\">\n                            <TextField\n                                onChange={e=>setsoyisim(e.target.value)}\n                                value={soyisim}\n                                label=\"Soyisim\"\n                                marginBottom=\"10px\"\n                                fullWidth\n                                ariant=\"outlined\"\n                            />\n                        </Box>\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" marginY=\"auto\">\n                        <Box flex=\"1 1 auto\">\n                            <TextField\n                                onChange={e=>settelefon(e.target.value)}\n                                value={telefon}\n                                label=\"Telefon\"\n                                marginBottom=\"10px\"\n                                fullWidth\n                                ariant=\"outlined\"\n                            />\n                        </Box>\n                        <Box flex=\"1 1 auto\" marginLeft=\"20px\">\n                            <TextField\n                                onChange={e=>setemail(e.target.value)}\n                                value={email}\n                                label=\"E-Mail Adresi\"\n                                marginBottom=\"10px\"\n                                fullWidth\n                                ariant=\"outlined\"\n                            />\n                        </Box>\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" marginY=\"auto\">\n                        <Box flex=\"1 1 auto\">\n                            <TextField\n                                onChange={e=>setaddress(e.target.value)}\n                                value={address}\n                                label=\"Adres\"\n                                marginBottom=\"10px\"\n                                fullWidth\n                                ariant=\"outlined\"\n                            />\n                        </Box>\n                        <Box flex=\"1 1 auto\" marginLeft=\"20px\">\n                            <TextField\n                                onChange={e=>setbalance(e.target.value)}\n                                value={balance}\n                                label=\"Harici Borç\"\n                                marginBottom=\"10px\"\n                                fullWidth\n                                ariant=\"outlined\"\n                            />\n                        </Box>\n                    </Box>\n\n                    <Box display=\"flex\" flexDirection=\"row\" marginY=\"auto\">\n                        <Box flex=\"1 1 auto\">\n                            <TextField\n                                onChange={e=>setDescript(e.target.value)}\n                                value={descript}\n                                label=\"Açıklama\"\n                                rows=\"5\"\n                                marginBottom=\"10px\"\n                                fullWidth\n                                ariant=\"outlined\"\n                                multiline\n                            />\n                        </Box>\n                    </Box>\n                    <Box display=\"flex\" marginBottom=\"10px\">\n                        <Button variant=\"outlined\" color=\"primary\" style={{marginTop:\"auto\"}} onClick={updateClient}>\n                            Kaydet\n                        </Button>\n                        <Button variant=\"outlined\" color=\"secondary\" style={{marginTop:\"auto\",marginLeft:\"auto\"}} onClick={()=>ipcRenderer.send(\"reply\",false)}>\n                            İptal\n                        </Button>\n                    </Box>\n                </Box>\n            </Box>\n            }\n        </>\n}",{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":83,"column":32,"nodeType":"67","messageId":"68","endLine":83,"endColumn":34},{"ruleId":"69","severity":1,"message":"70","line":21,"column":10,"nodeType":"71","messageId":"72","endLine":21,"endColumn":15},{"ruleId":"65","severity":1,"message":"73","line":125,"column":34,"nodeType":"67","messageId":"68","endLine":125,"endColumn":36},{"ruleId":"74","severity":1,"message":"75","line":238,"column":32,"nodeType":"76","messageId":"77","endLine":238,"endColumn":33,"suggestions":"78"},{"ruleId":"74","severity":1,"message":"79","line":238,"column":34,"nodeType":"76","messageId":"77","endLine":238,"endColumn":35,"suggestions":"80"},{"ruleId":"81","severity":1,"message":"82","line":242,"column":17,"nodeType":"83","messageId":"84","endLine":242,"endColumn":30},{"ruleId":"65","severity":1,"message":"73","line":122,"column":34,"nodeType":"67","messageId":"68","endLine":122,"endColumn":36},{"ruleId":"74","severity":1,"message":"75","line":223,"column":32,"nodeType":"76","messageId":"77","endLine":223,"endColumn":33,"suggestions":"85"},{"ruleId":"74","severity":1,"message":"79","line":223,"column":34,"nodeType":"76","messageId":"77","endLine":223,"endColumn":35,"suggestions":"86"},{"ruleId":"81","severity":1,"message":"82","line":227,"column":17,"nodeType":"83","messageId":"84","endLine":227,"endColumn":30},{"ruleId":"61","replacedBy":"87"},{"ruleId":"63","replacedBy":"88"},{"ruleId":"69","severity":1,"message":"89","line":26,"column":14,"nodeType":"71","messageId":"72","endLine":26,"endColumn":20},{"ruleId":"69","severity":1,"message":"89","line":28,"column":14,"nodeType":"71","messageId":"72","endLine":28,"endColumn":20},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'Alert' is defined but never used.","Identifier","unusedVar","Expected '!==' and instead saw '!='.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["92","93"],"Unnecessary escape character: \\,.",["94","95"],"no-new-wrappers","Do not use Number as a constructor.","NewExpression","noConstructor",["96","97"],["98","99"],["90"],["91"],"'setage' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"100","fix":"101","desc":"102"},{"messageId":"103","fix":"104","desc":"105"},{"messageId":"100","fix":"106","desc":"102"},{"messageId":"103","fix":"107","desc":"105"},{"messageId":"100","fix":"108","desc":"102"},{"messageId":"103","fix":"109","desc":"105"},{"messageId":"100","fix":"110","desc":"102"},{"messageId":"103","fix":"111","desc":"105"},"removeEscape",{"range":"112","text":"113"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"114","text":"115"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"116","text":"113"},{"range":"117","text":"115"},{"range":"118","text":"113"},{"range":"119","text":"115"},{"range":"120","text":"113"},{"range":"121","text":"115"},[7397,7398],"",[7397,7397],"\\",[7399,7400],[7399,7399],[7000,7001],[7000,7000],[7002,7003],[7002,7002]]